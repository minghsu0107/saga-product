// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dep

import (
	"github.com/minghsu0107/saga-product/config"
	"github.com/minghsu0107/saga-product/infra"
	"github.com/minghsu0107/saga-product/infra/broker"
	product4 "github.com/minghsu0107/saga-product/infra/broker/product"
	"github.com/minghsu0107/saga-product/infra/cache"
	"github.com/minghsu0107/saga-product/infra/db"
	product3 "github.com/minghsu0107/saga-product/infra/grpc/product"
	"github.com/minghsu0107/saga-product/infra/http/product"
	pkg2 "github.com/minghsu0107/saga-product/infra/observe"
	"github.com/minghsu0107/saga-product/pkg"
	"github.com/minghsu0107/saga-product/repo"
	"github.com/minghsu0107/saga-product/repo/proxy"
	product2 "github.com/minghsu0107/saga-product/service/product"
)

// Injectors from wire.go:

func InitializeProductServer() (*infra.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	engine := product.NewEngine(configConfig)
	gormDB, err := db.NewDatabaseConnection(configConfig)
	if err != nil {
		return nil, err
	}
	idGenerator, err := pkg.NewSonyFlake()
	if err != nil {
		return nil, err
	}
	productRepository := repo.NewProductRepository(gormDB, idGenerator)
	localCache, err := cache.NewLocalCache(configConfig)
	if err != nil {
		return nil, err
	}
	clusterClient, err := cache.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCache := cache.NewRedisCache(configConfig, clusterClient)
	productRepoCache := proxy.NewProductRepoCache(configConfig, productRepository, localCache, redisCache)
	productService := product2.NewProductService(configConfig, productRepoCache)
	sagaProductService := product2.NewSagaProductService(configConfig, productRepoCache)
	router := product.NewRouter(productService, sagaProductService)
	server := product.NewProductServer(configConfig, engine, router)
	grpcServer := product3.NewProductServer(configConfig, productService, sagaProductService)
	subscriber, err := broker.NewNATSSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	publisher, err := broker.NewNATSPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	eventRouter, err := product4.NewProductEventRouter(configConfig, sagaProductService, subscriber, publisher)
	if err != nil {
		return nil, err
	}
	observibilityInjector, err := pkg2.NewObservibilityInjector(configConfig)
	if err != nil {
		return nil, err
	}
	infraServer := infra.NewServer(server, grpcServer, eventRouter, observibilityInjector)
	return infraServer, nil
}

func InitializeMigrator(app string) (*db.Migrator, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewDatabaseConnection(configConfig)
	if err != nil {
		return nil, err
	}
	migrator := db.NewMigrator(gormDB, app)
	return migrator, nil
}
